.################################################################################
.$ [ANN] pyKook 0.7.2 - task automation tool for Python, similar to Rake or Ant

I have released pyKook 0.7.2.
http://pypi.python.org/pypi/Kook/
http://www.kuwata-lab.com/kook/
http://www.kuwata-lab.com/kook/pykook-users-guide.html

pyKook is a task automation tool for Python, similar to Rake or Ant.

Bugfix in this release
----------------------

* Fix 'bin/kk' command to work on Linux.


--
regads,
makoto kuwata



.################################################################################
.$ [ANN] pyKook 0.7.1 - task automation tool for Python, similar to Rake or Ant

I have released pyKook 0.7.1.
http://pypi.python.org/pypi/Kook/
http://www.kuwata-lab.com/kook/
http://www.kuwata-lab.com/kook/pykook-users-guide.html

pyKook is a task automation tool for Python, similar to Rake or Ant.

Bugfix in this release
----------------------

* Fixed to include 'kook/books/*.py' into .egg file


--
regads,
makoto kuwata



.################################################################################
.$ [ANN] pyKook 0.7.0 - task automation tool for Python, similar to Rake or Ant

Hi,

I have released pyKook 0.7.0.
http://pypi.python.org/pypi/Kook/
http://www.kuwata-lab.com/kook/
http://www.kuwata-lab.com/kook/pykook-users-guide.html

In this release, you can run commands on remote machines using ssh.
This is very useful to deploy your application.


pyKook Overview
---------------

pyKook is a task automation tool for Python, similar to Rake or Ant.

(Kookbook.py):

    kookbook.default = 'build'

    ## task
    @recipe(None, ['hello'])
    def build(c):
        """build all"""
        pass

    ## file
    @recipe('hello', ['hello.o'])
    def file_hello(c):
        """build 'hello' from 'hello.o'"""
        system(c%'gcc -o $(product) $(ingred)')

    ## rule
    @recipe('*.o', ['$(1).c', '$(1).h'])
    def file_o(c):
        system(c%'gcc -c $(ingred)')


Command-line:

    bash> kk     # or pykook
    $ gcc -c hello.c
    ### *** hello.o (recipe=file_o)
    $ gcc -c hello.c
    ### ** hello (recipe=file_hello)
    $ gcc -o hello hello.o
    ### * build (recipe=build)

See http://www.kuwata-lab.com/kook/pykook-users-guide.html for details.


Enhancements in this release
----------------------------

* (EXPERIMENTAL!!) Remote command execution (ssh and sftp) is available.
  This is very useful to deploy your application into servers.

  Ex (Kookbook.py)::

	from kook.remote import Remote
	remote = Remote(
	    hosts    = ['www1', 'www2', 'user3@www3:10022'],
	    port     = 22,
	    user     = 'user1',
	    #password = None,      # for login, '~/.ssh/id_rsa' and sudo
	    passphrase = None,     # only for '~/.ssh/id_rsa'
	    sudo_password = 'xxx', # only for sudo command
	)

	@recipe
	@remotes(remote)
	def hostinfo(c):
	    """show hostname"""
	    ssh = c.ssh
	    ssh('hostname')        # run command with ssh
	    ssh('whomai')          # run command with ssh
	    ssh.sudo('whoami')     # run command with sudo

	@recipe
	@remotes(remote)
	def exchange(c):
	    """upload and download files"""
	    ssh = c.ssh
	    with ssh.pushd('work/apps'):
	        ssh.get('file.remote')    # download a file
	        ssh.put('file.local')     # upload a file
	        ssh.mget('remote.*')      # download files
	        ssh.mput('local.*')       # upload files

  Notice that you must configure ssh at first and confirm that
  you can log into servers without typing password::

	bash> ssh user1@www1
	bash> ssh user1@www2
	bash> ssh -p 10022 user3@www3
	bash> kk hostinfo
	### * showinfo (recipe=showinfo)
	[user1@www1]$ hostame
	www1
	[user1@www1]$ whoami
	user1
	[user1@www1]$ sudo whoami
	root
	[user2@www2]$ hostame
	www2
	[user2@www2]$ whoami
	user2
	[user2@www2]$ sudo whoami
	root
	[user3@www3]$ hostame
	www3
	[user3@www3]$ whami
	user3
	[user3@www3]$ sudo whoami
	root

  Currently commands are executed sequencially (not in parallel).

* (EXPERIMENTAL!!) Password object supported.
  Password object asks you to enter password in prompt when necessary.

  Ex (Kookbook.py)::

	from kook.remote import Remote, Password
	remote = Remote(
	    hosts         = ['user1@www1:22'],
	    #password     = Password('login'),
	    passphrase    = Password('~/.ssh/id_rsa'),
	    sudo_password = Password('sudo command')
	)
	#
	@recipe
	@remotes(remote)
	def remote_test(c):
	    ssh = c.ssh
	    ssh.sudo('whoami')

  Output example::

	bash> kk remote_test
	### * remote_test (recipe=remote_test)
	Password for ~/.ssh/id_rsa: 
	Password for sudo command: 
	[user1@www1]$ sudo whoami
	root

  It is easy to share password object.

  Ex (Kookbook.py)::

	from kook.remote import Remote, Password
	passwd = Password()
	remote = Remote(
	    hosts         = ['user1@www1:22'],
	    password      = passwd,
	    passphrase    = passwd,
	    sudo_password = passwd,
	)


Changes in this release
-----------------------

* Category class is changed to convers all instance methods into staticmethods.

  Ex (Kookbook.py):

	class apache(Category):
	    @recipe
	    def start(c):
	       system('apachectl start')

	## start() is converted into staticmethod
	assert type(apache.__dict__['start']) == staticmethod
	from types import FunctionType
	assert type(apache.start) == FuntionType

  This makes execution of other recipes in category easier::

	class apache(Category):
	    @recipe
	    def start(c):
	       ...
	    @recipe
	    def stop(c):
	       ...
	    @recipe
	    def restart(c):
	       apache.start(c)    # execute other recipe
	       apache.stop(c)     # execute other recipe

* (internal) kook.config.stdout and kook.config.stderr are removed.



See http://www.kuwata-lab.com/kook/pykook-CHANGES.txt for details.


Have fun!

--
regards,
makoto kuwata



.################################################################################
.$ [ANN] pyKook 0.6.0 - task automation tool for Python, similar to Rake or Ant

Hi,

I have released pyKook 0.6.0.
http://pypi.python.org/pypi/Kook/0.6.0
http://www.kuwata-lab.com/kook/
http://www.kuwata-lab.com/kook/pykook-users-guide.html

In this release, a lot of enhancements are introduced.


pyKook Overview
---------------

pyKook is a task automation tool for Python, similar to Rake or Ant.

(Kookbook.py):

    kookbook.default = 'build'

    @recipe(None, ['hello'])
    def build(c):
        """build all"""
        pass

    @recipe('hello', ['hello.o'])
    def file_hello(c):
        """build 'hello' from 'hello.o'"""
        system(c%'gcc -o $(product) $(ingred)')

    @recipe('*.o', ['$(1).c', '$(1).h'])
    def file_o(c):
        system(c%'gcc -c $(ingred)')


Command-line:

    bash> kk     # or pykook
    $ gcc -c hello.c
    ### *** hello.o (recipe=file_o)
    $ gcc -c hello.c
    ### ** hello (recipe=file_hello)
    $ gcc -o hello hello.o
    ### * build (recipe=build)

See http://www.kuwata-lab.com/kook/pykook-users-guide.html for details.


Enhancements in this release
----------------------------

* 'kookbook' variable is available in your cookbook to specify
  materials or default product.
* Recipe meta-programming support.
  You can manipulate recipe objects directly.
* Load other cookbooks by kookbook.load().
  This enables you to split your Kookbook.py into several files.
* Support some useful task recipes: clean, sweep, and all.
* Namespace is now supported. It is called as 'Category' in Kook.
* Concatenation supported.
  You can concatenate your cookbook and pyKook libraries into a file.
  Using concatenated file, user doesn't need to install pyKook at all.
* Argument description is available.
* Private spice option is available.
* New command 'pushd()' provided.

See http://www.kuwata-lab.com/kook/pykook-CHANGES.txt for details.


Have fun!

--
regards,
makoto kuwata



.################################################################################

.$ [ANN] pyKook 0.0.4 - a smart build tool similar to Make, Rake, or Ant

Hi,

I have released pyKook 0.0.4.
http://pypi.python.org/pypi/Kook/0.0.4
http://www.kuwata-lab.com/kook/
http://www.kuwata-lab.com/kook/pykook-users-guide.html

In this release, recipe syntax is changed (see below).


Overview
========

pyKook is a smart build tool similar to Make, Rake, Ant, or Cook.
pyKook regards software project as cooking.
Terms used in pyKook are cooking terms.
For example:

    cookbook    -  Makefile
    product     -  target file
    ingredient  -  source file
    recipe      -  how to create target from source
    spices      -  command-line options for recipe


Cookbook (= Makefile) is written in pure Python.
You can write any statements or expressions in cookbook.

NOTICE: pyKook is under alpha release. Spec and features may be changed
in the future without previous announcement.


Example
=======

Example of cookbook (Kookbook.py):

    --------------------------------------------------
    ##
    ## properties
    ##
    cc     = prop('cc',     'gcc')
    cflags = prop('cflags', '-g -Wall')
    
    
    ##
    ## recipes
    ##
    @recipe
    @ingreds("hello")
    def all(c):        # or task_all(c)
        pass
    
    @recipe
    @product("hello")
    @ingreds("hello.o")
    def file_command(c):
        """generates hello command"""
        system(c%"$(cc) $(cflags) -o $(product) $(ingred)")
    
    @recipe
    @product("*.o")
    @ingreds("$(1).c", if_exists("$(1).h"))
    def file_ext_o(c):
        """compile '*.c' and '*.h'"""
        system(c%"$(cc) $(cflags) -c $(1).c")
    
    @recipe
    def clean(c):
        rm_f("*.o")
    --------------------------------------------------


Exampe of result:

    --------------------------------------------------
    bash> ls
    Kookbook.py   hello.c    hello.h
    
    bash> pykook -l
    Properties:
      cc                  : 'gcc'
      cflags              : '-g -Wall'
    
    Task recipes:
      all                 : cook all products
      clean               : remove by-products
    
    File recipes:
      hello               : generates hello command
      *.o                 : compile '*.c' and '*.h'
    
    (Tips: you can set 'kook_default_product' variable in your kookbook.)
    
    bash> pykook all           # or, pykook --cc=gcc4 all
    ### *** hello.o (func=file_ext_o)
    $ gcc -g -Wall -c hello.c
    ### ** hello (func=file_command)
    $ gcc -g -Wall -o hello hello.o
    ### * all (func=task_all)
    --------------------------------------------------


See users-guide for more details.
http://www.kuwata-lab.com/kook/pykook-users-guide.html


Enhancements sice 0.0.3
=======================

- Compact style of @recipe decorator supported.
  ex::
     ## normal style
	   @recipe
	   @product('*.o')
	   @ingreds('$(1).c', '$(1).h')
	   def file_o(c):
	       system(c%"gcc -c $(ingre)")

     ## compact style
	   @recipe('*.o', ['$(1).c', '$(1).h'])
	   def file_o(c):
	       system(c%"gcc -c $(ingre)")

- 'kk' script supports '$KK_CLIMB' environment variable.
  If you set it, 'kk' script searches parent directories
  when 'Kookbook.py' is not found.
  ex::
     sh> ls -F
     Kookbook.py    src/    test/
     sh> cd src/foo/bar/
     sh> kk clean                    # ERROR
     kk: No kookbook found.
     sh> export KK_CLIMB=1
     sh> kk clean                    # OK
     ### * clean (recipe=clean)
     $ rm **/*.pyc

- New command-line option '-R' (recursively) supported.
  If you specify '-R', pykook command searches Kookbook.py
	in parent directory recursively.
  ex::
     sh> ls -F
     Kookbook.py    src/    test/
     sh> cd src/foo/bar/
     sh> pykook clean                # ERROR
     pykook: Kookbook.py: not found.
     sh> pykook -R clean             # OK
     ### * clean (recipe=clean)
     $ rm **/*.pyc
  

Have fun!

--
regards,
makoto kuwata


.################################################################################

.$ [ANN] pyKook 0.0.3 - a smart build tool similar to Make, Rake, or Ant

Hi,

I have released pyKook 0.0.3.
http://pypi.python.org/pypi/Kook/0.0.3
http://www.kuwata-lab.com/kook/
http://www.kuwata-lab.com/kook/pykook-users-guide.html

In this release, recipe syntax is changed (see below).


Overview
========

pyKook is a smart build tool similar to Make, Rake, Ant, or Cook.
pyKook regards software project as cooking.
Terms used in pyKook are cooking terms.
For example:

    cookbook    -  Makefile
    product     -  target file
    ingredient  -  source file
    recipe      -  how to create target from source
    spices      -  command-line options for recipe


Cookbook (= Makefile) is written in pure Python.
You can write any statements or expressions in cookbook.

NOTICE: pyKook is under alpha release. Spec and features may be changed
in the future without previous announcement.


Example
=======

Example of cookbook (Kookbook.py):

    --------------------------------------------------
    ##
    ## properties
    ##
    cc     = prop('cc',     'gcc')
    cflags = prop('cflags', '-g -Wall')
    
    
    ##
    ## recipes
    ##
    @recipe
    @ingreds("hello")
    def all(c):        # or task_all(c)
        pass
    
    @recipe
    @product("hello")
    @ingreds("hello.o")
    def file_command(c):
        """generates hello command"""
        system(c%"$(cc) $(cflags) -o $(product) $(ingred)")
    
    @recipe
    @product("*.o")
    @ingreds("$(1).c", if_exists("$(1).h"))
    def file_ext_o(c):
        """compile '*.c' and '*.h'"""
        system(c%"$(cc) $(cflags) -c $(1).c")
    
    @recipe
    def clean(c):
        rm_f("*.o")
    --------------------------------------------------


Exampe of result:

    --------------------------------------------------
    bash> ls
    Kookbook.py   hello.c    hello.h
    
    bash> pykook -l
    Properties:
      cc                  : 'gcc'
      cflags              : '-g -Wall'
    
    Task recipes:
      all                 : cook all products
      clean               : remove by-products
    
    File recipes:
      hello               : generates hello command
      *.o                 : compile '*.c' and '*.h'
    
    (Tips: you can set 'kook_default_product' variable in your kookbook.)
    
    bash> pykook all           # or, pykook --cc=gcc4 all
    ### *** hello.o (func=file_ext_o)
    $ gcc -g -Wall -c hello.c
    ### ** hello (func=file_command)
    $ gcc -g -Wall -o hello hello.o
    ### * all (func=task_all)
    --------------------------------------------------


See users-guide for more details.
http://www.kuwata-lab.com/kook/pykook-users-guide.html


Enhancements, Changes, Bug fixes sice 0.0.2
===========================================


Changes
-------

  - IMPORTANT!!
    New '@recipe' decorator is required for each recipe function.
    If function is decorated by '@recipe', 'task_' prefix is not necessary.
  
    ex:
      ## previous version
  	  def task_clean(c):    # 'task_' prefix is required
  	    rm_rf("*.o")
    
      ## since this release
  	  @release              # @release decorator is required
  	  def clean(c):         # 'task_' prefix is not necessary
  	    rm_rf("*.o")
    
    See http://www.kuwata-lab.com/kook/pykook-users-guide.html#cookbook-recipekind
  	for details.
  
  - Library codes are much refactored.


Enhancements
------------

  - IMPORTANT!!
    New feature to support command-line script framework.
    You can convert Kookbook.py into command-line script.
	See http://www.kuwata-lab.com/kook/pykook-users-guide.html#topic-framework
	for details.

  - New command-line option '-n' (no exec) supported.
    If you specify '-n', commands such as 'cp()' or 'rm()' are not executed.
	In other words, '-n' means 'dry-run'.

  - Add a lot of test scripts.


Bug fixes
---------

  - A bug related timestamp detection is now fixed.
    There was a case that product file was not updated even when
    ingredient files were updated.

  - A bug about recipe tree is fixed. There was a case that the same recipe
    can be invoke more than once when an intermediate recipe was required
    from several recipes.



Have fun!

--
regards,
makoto kuwata


.################################################################################


.$ [ANN] pyKook 0.0.2 - a simple build tool similar to Make or Ant

Hi,

I have released pyKook 0.0.2.
http://pypi.python.org/pypi/Kook/0.0.2
http://www.kuwata-lab.com/kook/
http://www.kuwata-lab.com/kook/pykook-users-guide.html


Overview
--------

pyKook is a simple build tool similar to Make, Ant, Rake, or SCons.
pyKook regards software project as cooking.
Terms used in pyKook are cooking terms.
For example:

    cookbook    -  Makefile
    product     -  target file
    ingredient  -  source file
    recipe      -  how to create target from source
    spices      -  command-line options for recipe


Cookbook (= Makefile) is written in pure Python.
You can write any statements or expressions in cookbook.

NOTICE: pyKook is under alpha release. Spec and features may be changed
in the future without previous announcement.


Example
-------

Example of cookbook (Kookbook.py):

    --------------------------------------------------
    ##
    ## properties
    ##
    cc     = prop('cc',     'gcc')
    cflags = prop('cflags', '-g -Wall')
    
    
    ##
    ## recipes
    ##
    @ingreds("hello")
    def task_all(c):
        pass
    
    @product("hello")
    @ingreds("hello.o")
    def file_command(c):
        """generates hello command"""
        system(c%"$(cc) $(cflags) -o $(product) $(ingred)")
    
    @product("*.o")
    @ingreds("$(1).c", if_exists("$(1).h"))
    def file_ext_o(c):
        """compile '*.c' and '*.h'"""
        system(c%"$(cc) $(cflags) -c $(1).c")
    
    def task_clean(c):
        rm_f("*.o")
    --------------------------------------------------


Exampe of result:

    ==================================================
    bash> ls
    Kookbook.py   hello.c    hello.h
    
    bash> pykook -l
    Properties:
      cc                  : 'gcc'
      cflags              : '-g -Wall'
    
    Task recipes:
      all                 : cook all products
      clean               : remove by-products
    
    File recipes:
      hello               : generates hello command
      *.o                 : compile '*.c' and '*.h'
    
    (Tips: you can set 'kook_default_product' variable in your kookbook.)
    
    bash> pykook all           # or, pykook --cc=gcc4 all
    ### *** hello.o (func=file_ext_o)
    $ gcc -g -Wall -c hello.c
    ### ** hello (func=file_command)
    $ gcc -g -Wall -o hello hello.o
    ### * all (func=task_all)
    ==================================================


See users-guide for more details.
http://www.kuwata-lab.com/kook/pykook-users-guide.html


Enhancements, Changes, Bug fixes sice 0.0.1
-------------------------------------------


Enhancements:

- Python 3 support.

- Add 'kk' script which is shortcat for kk command.


Changes:

- Decorator '@cmdopts()' is renamed to '@spices()', and
  there is no need to call parse_cmdopts().
  
      ### prev version
      @cmdopts('-v: verbose', '-f file: filename')
      def task_example(c, *args):
          opts, rests = c.parse_cmdopts(args)
          verbose = opts.get('v', False):
          fileame = opts.get('f', None)
      
      ### since this release (0.0.2)
      @spices('-v: verbose', '-f file: filename')
      def task_example(c, *args, *kwargs):
          opts, rests = kwarts, args
          verbose = opts.get('v', False):
          fileame = opts.get('f', None)

- Remove 'pyk' script

- Testing library is changed from Python's unittest library
  into 'test/oktest.py'.


Bugfixes:

- glob2() now recognizes files on current directory.



Have fun!

--
regards,
makoto kuwata


################################################################################

.$ [ANN] pyKook 0.0.1 - a simple build tool similar to Make or Ant

Hi all,

I have released pyKook 0.0.1.
http://pypi.python.org/pypi/Kook/0.0.1
http://www.kuwata-lab.com/kook/
http://www.kuwata-lab.com/kook/pykook-users-guide.html

pyKook is a simple build tool similar to Make, Ant, Rake, or SCons.
pyKook regards software project as cooking.
Terms used in pyKook are cooking terms.
For example:

    cookbook    -  Makefile
    product     -  target file
    ingredient  -  source file
    recipe      -  how to create target from source


Cookbook (= Makefile) is written in pure Python.
You can write any statements or expressions in cookbook.


Example of cookbook (Kookbook.py):

    --------------------------------------------------
    ##
    ## properties
    ##
    cc     = prop('cc',     'gcc')
    cflags = prop('cflags', '-g -Wall')
    
    
    ##
    ## recipes
    ##
    @ingreds("hello")
    def task_all(c):
        pass
    
    @product("hello")
    @ingreds("hello.o")
    def file_command(c):
        """generates hello command"""
        system(c%"$(cc) $(cflags) -o $(product) $(ingred)")
    
    @product("*.o")
    @ingreds("$(1).c", if_exists("$(1).h"))
    def file_ext_o(c):
        """compile '*.c' and '*.h'"""
        system(c%"$(cc) $(cflags) -c $(1).c")
    
    def task_clean(c):
        rm_f("*.o")
    --------------------------------------------------


Exampe of result:

    ==================================================
    sh> ls
    Kookbook.py   hello.c    hello.h
    
    sh> pykook -l
    Properties:
      cc                  : 'gcc'
      cflags              : '-g -Wall'
    
    Task recipes:
      all                 : cook all products
      clean               : remove by-products
    
    File recipes:
      hello               : generates hello command
      *.o                 : compile '*.c' and '*.h'
    
    (Tips: you can set 'kook_default_product' variable in your kookbook.)
    
    sh> pykook all           # or, pykook --cc=gcc4 all
    ### *** hello.o (func=file_ext_o)
    $ gcc -g -Wall -c hello.c
    ### ** hello (func=file_command)
    $ gcc -g -Wall -o hello hello.o
    ### * all (func=task_all)
    ==================================================


See users-guide for more details.
http://www.kuwata-lab.com/kook/pykook-users-guide.html


Have fun!

--
regards,
makoto kuwata
